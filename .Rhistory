input <- c(1227L, 1065L, 329L, 1063L, 1889L, 1700L, 1805L, 1373L, 389L, 1263L, 1276L, 1136L, 1652L, 1981L, 1406L, 1249L, 1197L, 1379L, 1050L, 1791L, 1703L, 2001L, 1842L, 1707L, 1486L, 1204L, 1821L, 1807L, 1712L, 1871L, 1599L, 1390L, 1219L, 1612L, 1980L, 1857L, 1511L, 1702L, 1455L, 1303L, 1052L, 1754L, 1545L, 1488L, 1848L, 1236L, 1549L, 1887L, 1970L, 1123L, 1686L, 1404L, 1688L, 1106L, 1296L, 401L, 1829L, 1693L, 1389L, 1957L, 914L, 1176L, 1348L, 1275L, 1624L, 1401L, 1045L, 1396L, 1352L, 1569L, 1060L, 1235L, 1679L, 1503L, 1340L, 1872L, 1410L, 1077L, 958L, 1681L, 1189L, 1466L, 1087L, 1852L, 1293L, 1139L, 1300L, 1323L, 661L, 1388L, 1983L, 1325L, 1112L, 1774L, 1858L, 1785L, 1616L, 1255L, 1198L, 1354L, 1124L, 1834L, 1417L, 1918L, 1496L, 33L, 1150L, 1861L, 1172L, 2006L, 1199L, 1558L, 1919L, 1620L, 1613L, 1710L, 1477L, 1592L, 1709L, 1909L, 1670L, 1922L, 1840L, 1768L, 1982L, 1193L, 1736L, 1877L, 1770L, 1191L, 1433L, 1072L, 1148L, 1225L, 1147L, 1171L, 1424L, 1913L, 1228L, 1339L, 1814L, 1504L, 1251L, 1240L, 1272L, 1500L, 1927L, 1428L, 1641L, 1453L, 1729L, 1976L, 1808L, 1180L, 1024L, 1108L, 1085L, 1669L, 1636L, 1005L, 1520L, 1929L, 1626L, 1551L, 1234L, 1988L, 1256L, 1524L, 1571L, 1506L, 1977L, 1749L, 1408L, 1540L, 1934L, 1810L, 1328L, 1910L, 1478L, 1600L, 1699L, 1413L, 1446L, 1798L, 1013L, 1998L, 1661L, 1058L, 1051L, 1220L, 1447L, 1675L, 1912L, 1668L, 1932L, 1962L, 1055L, 1757L, 1116L, 1090L)
library(tidyverse)
sums <-
cross2(input, input, .filter = filter)
filter <- function(x, y) x + y != 2020
sums <-
cross2(input, input, .filter = filter)
View(sums)
trees_get <- function(mat, right_n, down_n){
repeats <- ceiling(right_n * nrow(mat) / ncol(mat))
new_mat <- do.call(cbind, replicate(repeats, mat, simplify = F))
encounters <- c()
n <- ceiling(nrow(mat) / down_n) - 1
for(i in 1:n){
encounters[i] <- new_mat[down_n * i + 1, right_n * i + 1]
}
print(sum(as.numeric(str_count(encounters, "#")))) # avoid integer overflow later
}
# Advent of Code - Day 03
# Data --------------------------------------------------------------------
dat <-
as.mat(read.fwf(here::here("day_03", "trees.txt"),
widths = rep(1, 31),
comment.char = ""))
# Functions ---------------------------------------------------------------
# this is to create a mat that accommodates all the movement that
# you have to go through to get to the bottom right
trees_get <- function(mat, right_n, down_n){
repeats <- ceiling(right_n * nrow(mat) / ncol(mat))
new_mat <- do.call(cbind, replicate(repeats, mat, simplify = F))
encounters <- c()
n <- ceiling(nrow(mat) / down_n) - 1
for(i in 1:n){
encounters[i] <- new_mat[down_n * i + 1, right_n * i + 1]
}
print(sum(as.numeric(str_count(encounters, "#")))) # avoid integer overflow later
}
mult_trees <- function(mat, slopes){
n_trees <- c()
for(i in 1:nrow(slopes)){
n_trees[i] <- trees_get(mat, slopes[i, 1], slopes[i, 2])
}
print(prod(n_trees))
}
# Calculations ------------------------------------------------------------
# Part 01
trees_get(dat, 3, 1)
# Part 02
entries <-
mat(c(1, 1,
3, 1,
5, 1,
7, 1,
1, 2),
nrow = 5,
byrow = T)
mult_trees(dat, entries)
trees_get <- function(mat, right_n, down_n){
repeats <- ceiling(right_n * nrow(mat) / ncol(mat))
new_mat <- do.call(cbind, replicate(repeats, mat, simplify = F))
encounters <- c()
n <- ceiling(nrow(mat) / down_n) - 1
for(i in 1:n){
encounters[i] <- new_mat[down_n * i + 1, right_n * i + 1]
}
print(sum(as.numeric(str_count(encounters, "#")))) # avoid integer overflow later
}
dat <-
as.mat(read.fwf(here::here("day_03", "trees.txt"),
widths = rep(1, 31),
comment.char = ""))
dat <-
as.matrix(read.fwf(
here::here("day_03", "trees.txt"),
widths = rep(1, 31),
comment.char = ""
))
trees_get <- function(mat, right_n, down_n){
repeats <- ceiling(right_n * nrow(mat) / ncol(mat))
new_mat <- do.call(cbind, replicate(repeats, mat, simplify = F))
encounters <- c()
n <- ceiling(nrow(mat) / down_n) - 1
for(i in 1:n){
encounters[i] <- new_mat[down_n * i + 1, right_n * i + 1]
}
print(sum(as.numeric(str_count(encounters, "#")))) # avoid integer overflow later
}
mult_trees <- function(mat, slopes){
n_trees <- c()
for(i in 1:nrow(slopes)){
n_trees[i] <- trees_get(mat, slopes[i, 1], slopes[i, 2])
}
print(prod(n_trees))
}
trees_get(dat, 3, 1)
dat <-
as.matrix(read.fwf(
here::here("day_03", "trees.txt"),
widths = rep(1, 31),
comment.char = ""
))
dat <-
as.matrix(read.fwf(
here::here("day_03", "trees.txt"),
widths = rep(1, 31),
comment.char = ""
))
trees_get <- function(mat, right_n, down_n){
repeats <- ceiling(right_n * nrow(mat) / ncol(mat))
new_mat <- do.call(cbind, replicate(repeats, mat, simplify = F))
encounters <- c()
n <- ceiling(nrow(mat) / down_n) - 1
for(i in 1:n){
encounters[i] <- new_mat[down_n * i + 1, right_n * i + 1]
}
print(sum(as.numeric(str_count(encounters, "#")))) # avoid integer overflow later
}
mult_trees <- function(mat, slopes){
n_trees <- c()
for(i in 1:nrow(slopes)){
n_trees[i] <- trees_get(mat, slopes[i, 1], slopes[i, 2])
}
print(prod(n_trees))
}
trees_get(dat, 3, 1)
trees_get <- function(mat, right_n, down_n){
repeats <- ceiling(right_n * nrow(mat) / ncol(mat))
new_mat <- do.call(cbind, replicate(repeats, mat, simplify = F))
encounters <- c()
n <- ceiling(nrow(mat) / down_n) - 1
for(i in 1:n){
encounters[i] <- new_mat[down_n * i + 1, right_n * i + 1]
}
print(sum(as.numeric(stringr::str_count(encounters, "#")))) # avoid integer overflow later
}
mult_trees <- function(mat, slopes){
n_trees <- c()
for(i in 1:nrow(slopes)){
n_trees[i] <- trees_get(mat, slopes[i, 1], slopes[i, 2])
}
print(prod(n_trees))
}
trees_get(dat, 3, 1)
entries <-
mat(c(1, 1,
3, 1,
5, 1,
7, 1,
1, 2),
nrow = 5,
byrow = T)
entries <-
matrix(c(1, 1,
3, 1,
5, 1,
7, 1,
1, 2),
nrow = 5,
byrow = T)
mult_trees(dat, entries)
mult_trees(dat, entries) -> a
mult_trees(dat, entries) -> a
entries <-
matrix(c(1, 1,
3, 1,
5, 1,
7, 1,
1, 2),
nrow = 5,
byrow = T)
mult_trees(dat, entries) -> a
trees_get <- function(mat, right_n, down_n){
repeats <- ceiling(right_n * nrow(mat) / ncol(mat))
new_mat <- do.call(cbind, replicate(repeats, mat, simplify = F))
encounters <- c()
n <- ceiling(nrow(mat) / down_n) - 1
for(i in 1:n){
encounters[i] <- new_mat[down_n * i + 1, right_n * i + 1]
}
print(sum(as.numeric(stringr::str_count(encounters, "#")))) # avoid integer overflow later
}
mult_trees <- function(mat, slopes){
n_trees <- c()
for(i in 1:nrow(slopes)){
n_trees[i] <- trees_get(mat, slopes[i, 1], slopes[i, 2])
}
print(prod(n_trees))
}
trees_get(dat, 3, 1)
entries <-
matrix(c(1, 1,
3, 1,
5, 1,
7, 1,
1, 2),
nrow = 5,
byrow = T)
mult_trees(dat, entries) -> a
mult_trees(dat, entries) -> a
a
mult_trees(dat, entries)
